# Kickstart to deploy ESXi from DIPx automatically

vmaccepteula
rootpw VMware!23!

# Install to the first local disk, wipe existing VMFS
install --firstdisk=local --overwritevmfs

# Management network
network --bootproto=static --ip=10.0.99.2 --netmask=255.255.255.0 --gateway=10.0.99.1 --nameserver=10.0.20.10 --hostname=esxi01.nerd.dipx

reboot

%firstboot --interpreter=busybox

# NTP
esxcli system ntp set -s 10.0.20.10
esxcli system ntp set -e true
/etc/init.d/ntpd restart

# Enable SSH & ESXi Shell (for automation)
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh
#vim-cmd hostsvc/enable_esx_shell
#vim-cmd hostsvc/start_esx_shell

# Create a dedicated vSwitch for VLANs and attach second NIC if present
ESX_NIC=$(esxcli network nic list | awk 'NR==2{print $1}')
esxcli network vswitch standard add -v vSwitchLAN 2>/dev/null || true
[ -n "$ESX_NIC" ] && esxcli network vswitch standard uplink add -v vSwitchLAN -u $ESX_NIC || true

# Port Groups (idempotent)
for item in "VLAN10-Users 10" "VLAN15-WiFi 15" "VLAN20-Servers 20" "VLAN30-DMZ 30" "VLAN99-Mgmt 99"; do
  set -- $item; NAME=$1; VID=$2
  esxcli network vswitch standard portgroup add -v vSwitchLAN -p "$NAME" 2>/dev/null || true
  esxcli network vswitch standard portgroup set -p "$NAME" -v $VID
done

# --- Mount pre-partitioned REPO (P2) safely ---
USB_DEV="$(esxcli storage core device list \
  | awk '/^Device: /{d=$2} /Is USB:[[:space:]]*true/{print d; exit}')"
[ -n "$USB_DEV" ] && USB_P2="/dev/disks/${USB_DEV}:2" || USB_P2=""
if [ -n "$USB_P2" ] && [ -e "$USB_P2" ]; then
  if ! esxcli storage filesystem list | awk '{print $1}' | grep -qx REPO; then
    if vmkfstools -P "$USB_P2" >/dev/null 2>&1; then
      esxcli storage filesystem mount -d "$USB_P2" >/dev/null 2>&1 \
        || esxcli storage filesystem mount -l REPO >/dev/null 2>&1 || true
    else
      echo "WARN: Partition :2 not VMFS; expected pre-formatted REPO. Skipping mount."
    fi
  fi
else
  echo "WARN: REPO P2 not found; skipping."
fi

REPO_BASE="/vmfs/volumes/REPO"

# --- Variables for Provisioner VM (single ISO with embedded KS) ---
VM_NAME="prov01"
PG_MGT="VLAN99-Mgmt"                    # Controller lives on Mgmt VLAN
VM_DIR="/vmfs/volumes/${VM_NAME}"
ISO_OS="${REPO_BASE}/images/isos/OL10-prov.iso"  # <-- your custom OL ISO name

# Sanity: warn if ISO missing
[ -f "$ISO_OS" ] || echo "WARN: OS ISO missing: $ISO_OS"

# --- Create VM directory & disk (idempotent) ---
mkdir -p "$VM_DIR"
if [ ! -f "${VM_DIR}/${VM_NAME}.vmdk" ]; then
  vmkfstools -c 30G -d thin "${VM_DIR}/${VM_NAME}.vmdk"
fi

# --- Write minimal .vmx (absolute paths; one CD only) ---
cat > "${VM_DIR}/${VM_NAME}.vmx" <<EOF
.encoding = "UTF-8"
config.version = "8"
virtualHW.version = "14"
displayName = "${VM_NAME}"
# Safe default; you can change to oracleLinux_64Guest later
guestOS = "other3xLinux-64"
memsize = "4096"
numvcpus = "2"

scsi0.present = "TRUE"
scsi0.virtualDev = "lsilogic"
scsi0:0.present = "TRUE"
scsi0:0.fileName = "${VM_NAME}.vmdk"

ethernet0.present = "TRUE"
ethernet0.virtualDev = "vmxnet3"
ethernet0.networkName = "${PG_MGT}"
ethernet0.addressType = "generated"

sata0.present = "TRUE"
sata0:0.present = "TRUE"
sata0:0.deviceType = "cdrom-image"
sata0:0.fileName = "${ISO_OS}"

bios.bootDeviceClasses = "allow:cdrom,hd,net,floppy"
EOF

# --- Register VM if needed & power on ---
if ! vim-cmd vmsvc/getallvms | awk '{print $1,$2}' | grep -q " ${VM_NAME}$"; then
  VMID=$(vim-cmd solo/registervm "${VM_DIR}/${VM_NAME}.vmx")
else
  VMID=$(vim-cmd vmsvc/getallvms | awk -v n="${VM_NAME}" '$0 ~ (" " n "$"){print $1}')
fi
vim-cmd vmsvc/power.on "$VMID" >/dev/null 2>&1 || true

# Resolve VMID
VMID=$(vim-cmd vmsvc/getallvms | awk -v n="${VM_NAME}" '$0 ~ (" " n "$"){print $1}')
if [ -z "$VMID" ]; then
  echo "Helper: VM $VM_NAME not found; aborting ISO detach."
else
  echo "Helper: waiting for $VM_NAME (VMID $VMID) to complete install and power off..."
  SEEN_ON=0
  ATTEMPTS=180   # ~90 minutes @30s
  i=0
  while [ $i -lt $ATTEMPTS ]; do
    STATE=$(vim-cmd vmsvc/power.getstate "$VMID" | tail -1)
    [ "$STATE" = "Powered on" ] && SEEN_ON=1
    if [ "$STATE" = "Powered off" ] && [ $SEEN_ON -eq 1 ]; then
      echo "Helper: detected shutdown after install. Proceeding to detach ISO."
      break
    fi
    sleep 30
    i=$((i+1))
  done

  if [ $i -ge $ATTEMPTS ]; then
    echo "Helper: timeout waiting for shutdown; skipping ISO detach."
  else
    VMX="${VM_DIR}/${VM_NAME}.vmx"
    if [ ! -f "$VMX" ]; then
      echo "Helper: VMX not found at $VMX; skipping."
    else
      TMP="$VMX.tmp"
      # Remove any SATA CDROM ISO fileName lines; ensure startConnected is FALSE
      awk '
        BEGIN{sc=0}
        # Drop fileName only for SATA CD devices, keep VMDK etc.
        $0 ~ /^sata[0-9]+:[0-9]+\.fileName = / { next }
        { print }
        END{
          # Ensure a startConnected guard for the primary CD (sata0:0)
          print "sata0:0.startConnected = \"FALSE\""
        }
      ' "$VMX" > "$TMP" && mv "$TMP" "$VMX"

      # Reload VM config and boot from disk
      vim-cmd vmsvc/reload "$VMID" >/dev/null 2>&1 || true
      echo "Helper: powering on $VM_NAME from disk..."
      vim-cmd vmsvc/power.on "$VMID" >/dev/null 2>&1 || true
    fi
  fi
fi
